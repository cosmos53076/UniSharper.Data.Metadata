// NOTE: This script generated by editor automatically. No need to edit manually!
// ReSharper disable RedundantUsingDirective

using System.Collections.Generic;
using UniSharper.Data.Metadata;
using UniSharper.Extensions;
using UnityEngine;
using UnityEngine.Scripting;
using ColorUtility = UniSharper.Extensions.ColorUtility;

// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable UnusedMember.Global

namespace UniSharper.Data.Metadata.Samples
{
	/// <summary>
	/// UnityTypeSampleMetadata
	/// Note: Generated by Editor automatically. Please don't edit this file manually!
	/// </summary>
	public partial class UnityTypeSampleMetadata : MetadataEntity
	{
		private Vector2[] vector2ArraySample;

		private Vector2Int[] vector2IntArraySample;

		private Vector3[] vector3ArraySample;

		private Vector3Int[] vector3IntArraySample;

		private Vector4[] vector4ArraySample;

		private RangeInt[] rangeIntArraySample;

		private Quaternion[] quaternionArraySample;

		private Rect[] rectArraySample;

		private RectInt[] rectIntArraySample;

		private Color[] colorArraySample;

		private Color32[] color32ArraySample;


		/// <summary>
		/// Initializes a new instance of the <see cref="UnityTypeSampleMetadata"/> class.
		/// </summary>
		[Preserve]
		public UnityTypeSampleMetadata()
		{
		}

		/// <summary>
		/// ID
		/// </summary>
		public long ID { get; set; }

		/// <summary>
		/// Vector2 Value
		/// </summary>
		public float[] Vector2SampleValue { get; set; }

		/// <summary>
		/// Vector2 Value
		/// </summary>
		public Vector2 Vector2Sample => new(Vector2SampleValue[0], Vector2SampleValue[1]);

		/// <summary>
		/// Vector2Int Value
		/// </summary>
		public int[] Vector2IntSampleValue { get; set; }

		/// <summary>
		/// Vector2Int Value
		/// </summary>
		public Vector2Int Vector2IntSample => new(Vector2IntSampleValue[0], Vector2IntSampleValue[1]);

		/// <summary>
		/// Vector3 Value
		/// </summary>
		public float[] Vector3SampleValue { get; set; }

		/// <summary>
		/// Vector3 Value
		/// </summary>
		public Vector3 Vector3Sample => new(Vector3SampleValue[0], Vector3SampleValue[1], Vector3SampleValue[2]);

		/// <summary>
		/// Vector3Int Value
		/// </summary>
		public int[] Vector3IntSampleValue { get; set; }

		/// <summary>
		/// Vector3Int Value
		/// </summary>
		public Vector3Int Vector3IntSample => new(Vector3IntSampleValue[0], Vector3IntSampleValue[1], Vector3IntSampleValue[2]);

		/// <summary>
		/// Vector4 Value
		/// </summary>
		public float[] Vector4SampleValue { get; set; }

		/// <summary>
		/// Vector4 Value
		/// </summary>
		public Vector4 Vector4Sample => new(Vector4SampleValue[0], Vector4SampleValue[1], Vector4SampleValue[2], Vector4SampleValue[3]);

		/// <summary>
		/// RangeInt Value
		/// </summary>
		public int[] RangeIntSampleValue { get; set; }

		/// <summary>
		/// RangeInt Value
		/// </summary>
		public RangeInt RangeIntSample => new(RangeIntSampleValue[0], RangeIntSampleValue[1]);

		/// <summary>
		/// Quaternion Value
		/// </summary>
		public float[] QuaternionSampleValue { get; set; }

		/// <summary>
		/// Quaternion Value
		/// </summary>
		public Quaternion QuaternionSample => new(QuaternionSampleValue[0], QuaternionSampleValue[1], QuaternionSampleValue[2], QuaternionSampleValue[3]);

		/// <summary>
		/// Rect Value
		/// </summary>
		public float[] RectSampleValue { get; set; }

		/// <summary>
		/// Rect Value
		/// </summary>
		public Rect RectSample => new(RectSampleValue[0], RectSampleValue[1], RectSampleValue[2], RectSampleValue[3]);

		/// <summary>
		/// RectInt Value
		/// </summary>
		public int[] RectIntSampleValue { get; set; }

		/// <summary>
		/// RectInt Value
		/// </summary>
		public RectInt RectIntSample => new(RectIntSampleValue[0], RectIntSampleValue[1], RectIntSampleValue[2], RectIntSampleValue[3]);

		/// <summary>
		/// Color Value
		/// </summary>
		public float[] ColorSampleValue { get; set; }

		/// <summary>
		/// Color Value
		/// </summary>
		public Color ColorSample => new(ColorSampleValue[0], ColorSampleValue[1], ColorSampleValue[2], ColorSampleValue[3]);

		/// <summary>
		/// Color32 Value
		/// </summary>
		public byte[] Color32SampleValue { get; set; }

		/// <summary>
		/// Color32 Value
		/// </summary>
		public Color32 Color32Sample => new(Color32SampleValue[0], Color32SampleValue[1], Color32SampleValue[2], Color32SampleValue[3]);

		/// <summary>
		/// Vector2 Array Value
		/// </summary>
		public float[] Vector2ArraySampleValue { get; set; }

		/// <summary>
		/// Vector2 Array Value
		/// </summary>
		public Vector2[] Vector2ArraySample
		{
			get
			{
				if (vector2ArraySample  == null)
					Vector2Utility.TryParseArray(Vector2ArraySampleValue, out vector2ArraySample);

				return vector2ArraySample;
			}
		}

		/// <summary>
		/// Vector2Int Array Value
		/// </summary>
		public int[] Vector2IntArraySampleValue { get; set; }

		/// <summary>
		/// Vector2Int Array Value
		/// </summary>
		public Vector2Int[] Vector2IntArraySample
		{
			get
			{
				if (vector2IntArraySample  == null)
					Vector2IntUtility.TryParseArray(Vector2IntArraySampleValue, out vector2IntArraySample);

				return vector2IntArraySample;
			}
		}

		/// <summary>
		/// Vector3 Array Value
		/// </summary>
		public float[] Vector3ArraySampleValue { get; set; }

		/// <summary>
		/// Vector3 Array Value
		/// </summary>
		public Vector3[] Vector3ArraySample
		{
			get
			{
				if (vector3ArraySample  == null)
					Vector3Utility.TryParseArray(Vector3ArraySampleValue, out vector3ArraySample);

				return vector3ArraySample;
			}
		}

		/// <summary>
		/// Vector3Int Array Value
		/// </summary>
		public int[] Vector3IntArraySampleValue { get; set; }

		/// <summary>
		/// Vector3Int Array Value
		/// </summary>
		public Vector3Int[] Vector3IntArraySample
		{
			get
			{
				if (vector3IntArraySample  == null)
					Vector3IntUtility.TryParseArray(Vector3IntArraySampleValue, out vector3IntArraySample);

				return vector3IntArraySample;
			}
		}

		/// <summary>
		/// Vector4 Array Value
		/// </summary>
		public float[] Vector4ArraySampleValue { get; set; }

		/// <summary>
		/// Vector4 Array Value
		/// </summary>
		public Vector4[] Vector4ArraySample
		{
			get
			{
				if (vector4ArraySample  == null)
					Vector4Utility.TryParseArray(Vector4ArraySampleValue, out vector4ArraySample);

				return vector4ArraySample;
			}
		}

		/// <summary>
		/// RangeInt Array Value
		/// </summary>
		public int[] RangeIntArraySampleValue { get; set; }

		/// <summary>
		/// RangeInt Array Value
		/// </summary>
		public RangeInt[] RangeIntArraySample
		{
			get
			{
				if (rangeIntArraySample  == null)
					RangeIntUtility.TryParseArray(RangeIntArraySampleValue, out rangeIntArraySample);

				return rangeIntArraySample;
			}
		}

		/// <summary>
		/// Quaternion Array Value
		/// </summary>
		public float[] QuaternionArraySampleValue { get; set; }

		/// <summary>
		/// Quaternion Array Value
		/// </summary>
		public Quaternion[] QuaternionArraySample
		{
			get
			{
				if (quaternionArraySample  == null)
					QuaternionUtility.TryParseArray(QuaternionArraySampleValue, out quaternionArraySample);

				return quaternionArraySample;
			}
		}

		/// <summary>
		/// Rect Array Value
		/// </summary>
		public float[] RectArraySampleValue { get; set; }

		/// <summary>
		/// Rect Array Value
		/// </summary>
		public Rect[] RectArraySample
		{
			get
			{
				if (rectArraySample  == null)
					RectUtility.TryParseArray(RectArraySampleValue, out rectArraySample);

				return rectArraySample;
			}
		}

		/// <summary>
		/// RectInt Array Value
		/// </summary>
		public int[] RectIntArraySampleValue { get; set; }

		/// <summary>
		/// RectInt Array Value
		/// </summary>
		public RectInt[] RectIntArraySample
		{
			get
			{
				if (rectIntArraySample  == null)
					RectIntUtility.TryParseArray(RectIntArraySampleValue, out rectIntArraySample);

				return rectIntArraySample;
			}
		}

		/// <summary>
		/// Color Array Value
		/// </summary>
		public float[] ColorArraySampleValue { get; set; }

		/// <summary>
		/// Color Array Value
		/// </summary>
		public Color[] ColorArraySample
		{
			get
			{
				if (colorArraySample  == null)
					ColorUtility.TryParseArray(ColorArraySampleValue, out colorArraySample);

				return colorArraySample;
			}
		}

		/// <summary>
		/// Color32 Array Value
		/// </summary>
		public byte[] Color32ArraySampleValue { get; set; }

		/// <summary>
		/// Color32 Array Value
		/// </summary>
		public Color32[] Color32ArraySample
		{
			get
			{
				if (color32ArraySample  == null)
					Color32Utility.TryParseArray(Color32ArraySampleValue, out color32ArraySample);

				return color32ArraySample;
			}
		}
	}
}
